<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Gemini Nano Chat + Diagnostics</title>
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: #1e1e1e;
      color: #f5f5f5;
      margin: 0;
      padding: 0;
      display: flex;
      flex-direction: column;
      min-height: 100vh;
    }

    header {
      background-color: #0078d7;
      width: 100%;
      padding: 1rem;
      text-align: center;
      font-size: 1.5rem;
      font-weight: bold;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    }

    main {
      flex: 1;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 1rem;
    }

    #diagnostics {
      background-color: #2d2d2d;
      border-radius: 8px;
      width: 100%;
      max-width: 800px;
      min-height: 150px;
      max-height: 200px;
      overflow-y: auto;
      padding: 1rem;
      margin-bottom: 1rem;
      font-family: 'Courier New', Courier, monospace;
    }

    .log-success {
      color: #4caf50;
    }

    .log-warning {
      color: #ffb74d;
    }

    .log-error {
      color: #f44336;
    }

    #chat {
      flex: 1;
      width: 100%;
      max-width: 800px;
      display: flex;
      flex-direction: column;
      border-radius: 8px;
      background: #2d2d2d;
      padding: 1rem;
      overflow-y: auto;
    }

    .message {
      padding: 0.6rem 1rem;
      margin: 0.3rem 0;
      border-radius: 6px;
      max-width: 80%;
      line-height: 1.4;
      white-space: pre-wrap;
    }

    .user {
      align-self: flex-end;
      background-color: #0a84ff;
      color: white;
    }

    .ai {
      align-self: flex-start;
      background-color: #3a3a3a;
      color: #f5f5f5;
    }

    #input-area {
      display: flex;
      width: 100%;
      max-width: 800px;
      margin: 1rem auto;
    }

    #promptInput {
      flex: 1;
      padding: 0.8rem;
      border-radius: 6px 0 0 6px;
      border: none;
      outline: none;
      font-size: 1rem;
    }

    #sendBtn {
      background-color: #0a84ff;
      color: white;
      border: none;
      padding: 0 1.5rem;
      border-radius: 0 6px 6px 0;
      cursor: pointer;
      font-size: 1rem;
    }

    #sendBtn:hover {
      background-color: #006fd6;
    }
  </style>
</head>

<body>
  <header>Gemini Nano Chat + Diagnostics</header>

  <main>
    <button id="checkBtn">Run Diagnostics</button>
    <pre id="diagnostics"></pre>

    <div id="chat"></div>

    <div id="input-area">
      <input id="promptInput" type="text" placeholder="Type your message..." />
      <button id="sendBtn">Send</button>
    </div>
  </main>

  <script>
    let session = null;

    const diagnostics = document.getElementById('diagnostics');
    const chat = document.getElementById('chat');

    const logDiag = (msg, type = "info") => {
      const span = document.createElement("div");
      span.textContent = msg;
      span.className =
        type === "success" ? "log-success" :
          type === "warning" ? "log-warning" :
            type === "error" ? "log-error" : "";
      diagnostics.appendChild(span);
      diagnostics.scrollTop = diagnostics.scrollHeight;
      console.log(msg);
    };

    async function runDiagnostics() {
      diagnostics.innerHTML = "";

      if (!window.LanguageModel) {
        logDiag("❌ LanguageModel API not available.", "error");
        logDiag("➡️ Use latest Google Chrome and check chrome://on-device-internals", "warning");
        return;
      }
      logDiag("✅ LanguageModel API detected.", "success");

      try {
        const availability = await LanguageModel.availability();
        logDiag("🔍 availability(): " + availability);

        const params = await LanguageModel.params();
        logDiag("⚙️ params(): " + JSON.stringify(params));

        logDiag("⏳ Creating session...");
        session = await LanguageModel.create({
          monitor(m) {
            m.addEventListener('downloadprogress', e => {
              logDiag(`⬇️ Downloaded ${(e.loaded * 100).toFixed(2)}%`);
            });
          },
        });
        logDiag("✅ Session created.", "success");

      } catch (err) {
        logDiag("❌ Error: " + err.message, "error");
      }
    }

    async function sendMessage() {
      if (!session) {
        alert("Run diagnostics first to create a session.");
        return;
      }

      const input = document.getElementById("promptInput");
      const text = input.value.trim();
      if (!text) return;

      // Show user message
      const userMsg = document.createElement("div");
      userMsg.className = "message user";
      userMsg.textContent = text;
      chat.appendChild(userMsg);
      chat.scrollTop = chat.scrollHeight;

      input.value = "";

      try {
        const response = await session.prompt(text);

        const aiMsg = document.createElement("div");
        aiMsg.className = "message ai";
        aiMsg.textContent = response;
        chat.appendChild(aiMsg);
        chat.scrollTop = chat.scrollHeight;

      } catch (err) {
        const aiMsg = document.createElement("div");
        aiMsg.className = "message ai";
        aiMsg.textContent = "❌ Error: " + err.message;
        chat.appendChild(aiMsg);
      }
    }

    document.getElementById("checkBtn").addEventListener("click", runDiagnostics);
    document.getElementById("sendBtn").addEventListener("click", sendMessage);
    document.getElementById("promptInput").addEventListener("keypress", (e) => {
      if (e.key === "Enter") sendMessage();
    });
  </script>
</body>

</html>
